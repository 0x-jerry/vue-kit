import { writeFile } from 'fs/promises'
import { dirname, join } from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const r = (...args: string[]) => join(__dirname, ...args)

const config = {
  color: {
    gray: {
      50: '#f9fafb',
      100: '#f3f4f6',
      200: '#e5e7eb',
      300: '#d1d5db',
      400: '#9ca3af',
      500: '#6b7280',
      600: '#4b5563',
      700: '#374151',
      800: '#1f2937',
      900: '#111827',
    },
    primary: '#8A2BE2',
    text: '#000000',
    disabled: '@c-gray-400',
  },
  size: {
    base: '30px',
    sm: '24px',
  },
  var: {
    prefix: 'k-',
  },
  radius: {
    sm: '2px',
    base: '4px',
  },
}

main()

async function main() {
  const lines: string[] = [
    '// This file is auto generated by src/theme/generate.ts',
    '// So, do not edit it directly.',
  ]

  addVar(config.var)
  addVar(config.color, 'c-')
  addVar(config.size, 's-')
  addVar(config.radius, 'r-')

  await writeFile(r('./basic-vars.less'), lines.join('\n'))

  function addVar(obj: Record<string, string | Record<string, string>>, prefix = '') {
    Object.entries(obj).map(([k, v]) => {
      if (typeof v === 'string') {
        lines.push(`@${prefix}${k}: ${v};`)
      } else {
        addVar(v, prefix ? `${prefix}${k}-` : `${k}-`)
      }
    })
  }
}
